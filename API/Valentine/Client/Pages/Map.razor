@using Valentine.Client.Helpers
@using Valentine.Client.States
@using Valentine.Shared.Contracts.Models
@inject IJSRuntime JS
@inject MapInteractionState MapInteractionState
@implements IDisposable

<div id='map'></div>

@code {
    private MapModel SelectedMap { get; set; }

    private static Func<string, Task> HandleAreaSelectionAsyncProvider;

    protected override async Task OnInitializedAsync()
    {
        MapInteractionState.OnMapSelectedAsync += SelectMap;
        HandleAreaSelectionAsyncProvider = SelectAreaAsyncInternal;

        await Task.Delay(10);
        await JS.InvokeVoidAsync("InitializeControls", Constants.Coordinates.NE, Constants.Coordinates.SW);
    }

    private async Task SelectMap(MapModel map)
    {
        SelectedMap = map;

        if ((map?.OverallProgress ?? 0) == -1D)
        {
            await JS.InvokeVoidAsync("TriggerToastr", "#area-generator", true);
            return;
        }
    }

    [JSInvokable]
    public static async Task SelectAreaAsync(string id)
    {
        await HandleAreaSelectionAsyncProvider(id);
    }

    private async Task SelectAreaAsyncInternal(string id)
    {
        await MapInteractionState.HandleAreaSelectionAsync(id);
        await JS.InvokeVoidAsync("TriggerToastr", "#area-navigator", false);
        await JS.InvokeVoidAsync("TriggerToastr", "#area-navigator", true);
    }

    public void Dispose()
    {
        MapInteractionState.OnMapSelectedAsync -= SelectMap;
    }
}
