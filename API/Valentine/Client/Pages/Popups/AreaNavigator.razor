@using System.Net.Http.Headers
@using Valentine.Client.Enums
@using Valentine.Client.FormModels
@using Valentine.Client.States
@using Valentine.Client.Helpers
@inject IHttpClientFactory ClientFactory
@inject MapInteractionState MapInteractionState
@implements IDisposable

<div aria-live="polite" aria-atomic="true">
    <div class="toast-container position-absolute p-2 bottom-0 end-0">
        <div class="toast fade hide bg-light" id="area-navigator" data-bs-autohide="false" data-bs-animation="true">
            <div class="toast-header">
                <strong class="me-auto">Completion: </strong>
                <small>Navigator</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <p class="card-text">
                    Some quick example text to build on the card title and make up the bulk of
                    the card's
                    content.
                </p>
                <EditForm Model="StoryUploadModel" OnValidSubmit="UploadFiles">
                    <InputText @bind-Value="StoryUploadModel.AreaId" hidden />
                    <InputFile id="images-input" OnChange="LimitFilesUpload" multiple hidden />
                    <button type="button" class="btn btn-link" id="add-images-button" onclick="$('#images-input').trigger('click')">Select images</button>
                    <button type="submit" class="btn btn-outline-primary" disabled="@(StoryUploadModel.AreaId is null || UploadingState == ImageUploadingState.Uploading)">Upload images</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private HttpClient _api;
    const long MAX_FILE_SIZE = 1024 * 1024 * 5; // 5 MB

    private IReadOnlyList<IBrowserFile> Files { get; set; }
    private StoryUploadModel StoryUploadModel = new();

    private string StatusCode { get; set; } = string.Empty;
    private ImageUploadingState UploadingState { get; set; } = ImageUploadingState.Idle;

    protected override void OnInitialized()
    {
        _api = ClientFactory.CreateClient(Constants.Api.WEB_API);

        MapInteractionState.OnAreaSelectedAsync += SelectArea;

        base.OnInitialized();
    }

    private Task SelectArea(string id)
    {
        StoryUploadModel.AreaId = id;
        StateHasChanged();

        return Task.CompletedTask;
    }

    public void LimitFilesUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;

        Files = e.GetMultipleFiles(10);
    }

    public async Task UploadFiles()
    {
        StatusCode = string.Empty;
        UploadingState = ImageUploadingState.Uploading;

        using var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

        foreach (var file in Files)
        {
            var fileContent = new StreamContent(file.OpenReadStream(MAX_FILE_SIZE));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(fileContent, nameof(Files), file.Name);
        }
        content.Add(new StringContent(StoryUploadModel.AreaId), nameof(StoryUploadModel.AreaId));

        var response = await _api.PostAsync("api/files", content);
        if (!response.IsSuccessStatusCode)
        {
            StatusCode = response.StatusCode.ToString();
            UploadingState = ImageUploadingState.Error;
            return;
        }

        UploadingState = ImageUploadingState.Uploaded;
    }

    public void Dispose()
    {
        MapInteractionState.OnAreaSelectedAsync -= SelectArea;
    }
}
