@using Valentine.Application.Interfaces
@using Valentine.Application.Models
@using Valentine.Client.Helpers
@using Valentine.Client.States
@using Valentine.Shared.Contracts.Requests
@using Valentine.Shared.Contracts.Models
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory
@inject ILayoutService LayoutService
@inject MapInteractionState MapInteractionState
@implements IDisposable

<div aria-live="polite" aria-atomic="true">
    <div class="toast-container position-absolute p-2 bottom-0 end-0">
        <div id="area-generator" class="toast fade hide bg-light" data-bs-autohide="false" data-bs-animation="true">
            <div class="toast-header">
                <strong class="me-auto">Areas generator</strong>
                <small>Settings</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <h5>Next step: Generate map areas</h5>
                <p class="text-muted">You may run this process multiple times if needed</p>
                <div class="pt-2 border-top">
                    <button type="button" class="btn btn-outline-dark" @onclick="GenerateRandomMapLayout">Generate areas</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveGeneratedLayout" disabled="@(!GeneratedOnce)">Accept this</button>
                    @if (!string.IsNullOrWhiteSpace(StatusCode))
                    {
                        <p class="text-danger m-0">Error occured</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private MapModel SelectedMap { get; set; }
    private FeatureCollection<Polygon> AreaPolygons { get; set; }

    private bool GeneratedOnce { get; set; }
    private string StatusCode { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        MapInteractionState.OnMapSelectedAsync += (map) => SelectMap(map);

        await Task.Delay(10);
        await JS.InvokeVoidAsync("InitializeControls", Constants.Coordinates.NE, Constants.Coordinates.SW);
    }

    private async Task GenerateRandomMapLayout()
    {
        AreaPolygons = await JS.InvokeAsync<FeatureCollection<Polygon>>("GenerateRandomMapLayout");
        GeneratedOnce = true;
    }

    private async Task SaveGeneratedLayout()
    {
        StatusCode = string.Empty;

        var request = new AreasSaveRequest()
        {
            MapId = SelectedMap.Id,
            GeoPoints = AreaPolygons.Features.SelectMany(x => x.Geometry.Coordinates.First()
                .Select((c, index) => new GeoPointModel(x.Properties["id"].ToString(), index, c.Coordinates[0], c.Coordinates[1])))
        };

        var api = ClientFactory.CreateClient(Constants.Api.WEB_API);

        var response = await api.PostAsync("api/areas", JsonContent.Create(request));
        if (!response.IsSuccessStatusCode)
        {
            StatusCode = response.StatusCode.ToString();
            return;
        }

        await JS.InvokeVoidAsync("TriggerToastr", "#area-generator", false);
    }

    private async Task ShowLayoutToast()
    {
        await JS.InvokeVoidAsync("TriggerToastr", "#area-generator", true);
    }

    private Task SelectMap(MapModel map)
    {
        SelectedMap = map;
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        MapInteractionState.OnMapSelectedAsync -= (map) => SelectMap(map);
    }
}
