@using Valentine.Client.States
@using Valentine.Client.FormModels
@using Valentine.Client.Extensions
@using Valentine.Client.Helpers
@using Valentine.Shared.Contracts.Requests
@using Valentine.Shared.Contracts.Responses
@inject IJSRuntime JS 
@inject IHttpClientFactory ClientFactory
@inject MapSelectionState MapSelectionState;

<div class="modal fade" id="app-map-modal" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="app-map-label" aria-hidden="true" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="app-map-label">New map</h5>
                <button type="button" class="btn-close" id="app-map-modal-close" data-bs-toggle="modal" data-bs-target="#app-key-modal" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm id="app-map-form" EditContext="@EditContext" OnValidSubmit="@SubmitHandler">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group mb-2" id="app-map-title-group">
                        <label for="app-map-title">Title</label>
                        <InputText class="form-control" id="app-map-title" placeholder="Enter map title" @bind-Value="NewMapModel.Title" />
                    </div>
                    <div class="form-group mb-2">
                        <label for="app-map-location">Location</label>
                        <InputSelect class="form-control" id="app-map-location" @bind-Value="NewMapModel.Location">
                            @foreach (var city in Cities)
                            {
                                <option value="@city" disabled="@(city == "Custom")">@city</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group mb-2">
                        <label for="app-map-description">Description</label>
                        <InputTextArea class="form-control" id="app-map-description" rows="2" placeholder="Enter map description" @bind-Value="NewMapModel.Description" />
                    </div>
                    <div class="custom-control custom-checkbox mb-1">
                        <label for="app-map-default" class="custom-control-label">Set as default map</label>
                        <InputCheckbox class="custom-control-input" id="app-map-default" @bind-Value="NewMapModel.IsDefault" />
                    </div>
                    <p>
                        <small class="text-muted">
                            Setting a map as default map will lead to its automatic load on the next usage of
                            provided app key
                        </small>
                    </p>
                    <div class="form-group d-flex justify-content-end align-items-center">
                        @if (!string.IsNullOrWhiteSpace(StatusCode))
                        {
                            <p class="text-danger m-0">Error occured</p>
                        }
                        <button type="submit" class="btn btn-primary btn-block">Add</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid UserId { get; set; }

    private EditContext EditContext;
    private NewMapModel NewMapModel = new();

    private List<string> Cities = new() { "Minsk", "Custom" };
    private string StatusCode { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new(NewMapModel);
        NewMapModel.Location = Cities[0];
        EditContext.OnPropertyChanged(nameof(NewMapModel.Location));

        await base.OnInitializedAsync();
    }

    private async Task SubmitHandler()
    {
        StatusCode = string.Empty;

        var request = new MapSaveRequest
        {
            UserId = UserId.ToString(),
            Title = NewMapModel.Title,
            Description = NewMapModel.Description,
            IsDefault = NewMapModel.IsDefault
        };

        var api = ClientFactory.CreateClient(Constants.Api.WEB_API);

        var response = await api.PostAsync("api/maps", JsonContent.Create<MapSaveRequest>(request));
        if (!response.IsSuccessStatusCode)
        {
            StatusCode = response.StatusCode.ToString();
            return;
        }

        await JS.InvokeVoidAsync("ReturnToAppKeyModalAsync");
        await MapSelectionState.RegisterNewMapCreatedAsync();
    }
}