@using System.Linq
@using Valentine.Client.Enums
@using Valentine.Client.States
@using Valentine.Client.Helpers
@using Valentine.Application.Interfaces
@using Valentine.Shared.Contracts.Responses
@using Valentine.Shared.Contracts.Models
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory
@inject ILayoutService LayoutService
@inject MapInteractionState MapInteractionState
@implements IDisposable

<div class="modal fade" id="app-key-modal" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="app-key-label" aria-hidden="true" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="app-key-label">Welcome ❤️</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (LoadingState == MapLoadingState.Loaded)
                {
                    <div id="maps-list-container">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="d-flex align-items-center text-muted text-uppercase mb-0">
                                Available maps
                                @if (Maps != null)
                                {
                                    <span class="badge badge-primary badge-pill ml-1">@Maps.Count</span>
                                }
                            </h6>
                            <button class="btn btn-link p-0 border-0 align-baseline text-decoration-none" data-toggle="modal" data-target="#app-map-modal">+ add new</button>
                        </div>
                        @if ((Maps?.Count ?? 0) == 0)
                        {
                            <div class="card text-center">
                                <div class="card-body">
                                    <p class="card-text">There are no maps yet</p>
                                    <p class="card-text">
                                        <small class="text-muted">
                                            Start your quest by adding
                                            <a class="card-link empty-link" data-bs-toggle="modal" data-bs-target="#app-map-modal" data-bs-dismiss="modal" role="button">a new map</a> or see the
                                            <a href="#" class="card-link empty-link m-0">guide</a> how it works
                                        </small>
                                    </p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <ul class="list-group" id="maps-list">
                                @foreach (var map in Maps)
                                {
                                <div class="list-group-item list-group-item-action d-flex justify-content-between" style="cursor: pointer" @onclick="@(() => LoadMapAreasAsync(map.Id))">
                                    <div class="d-flex flex-column">
                                        <h6 class="my-0">@map.Title</h6>
                                        <small class="text-muted">@map.Description</small>
                                        <small class="text-muted mt-auto">Created @map.CreatedAt</small>
                                    </div>
                                    <div class="d-flex flex-column align-items-end">
                                        <span class="text-muted">@(map.OverallProgress == -1D 
                                            ? "No areas generated" 
                                            : (map.OverallProgress == 0D ? 0.ToString() : map.OverallProgress.ToString("N2")) + "%")</span>
                                        <br />
                                        <button class="btn btn-link p-0 text-decoration-none" @onclick:stopPropagation="true">Delete</button>
                                    </div>
                                </div>
                                }
                            </ul>
                        }
                    </div>
                }
                else
                {
                    <form id="form-app-key">
                        <div class="form-group">
                            <label for="app-key-input" class="col-form-label">App key</label>
                            <input type="text" class="form-control" id="app-key-input" @bind="InputValue" />
                            <div class="invalid-feedback">The app key is not valid</div>
                        </div>
                    </form>
                }
            </div>
            <div class="modal-footer @(LoadingState == MapLoadingState.Loaded ? "justify-content-center" : "")" id="app-key-modal-footer">
                @if (LoadingState == MapLoadingState.Loaded)
                {
                    <p class="m-0">
                        Can't find your map?
                        <button class="btn btn-link p-0 text-decoration-none" @onclick="ReloadModal">Reenter app key</button>
                    </p>
                }
                else
                {
                    @if (!string.IsNullOrWhiteSpace(StatusCode))
                    {
                        <p class="text-danger float-left">Error occured</p>
                    }
                    <button type="button" class="btn btn-primary float-right" @onclick="GetUserMapsAsync">Submit</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private HttpClient _api;

    [Parameter]
    public EventCallback<Guid> OnUserLogin { get; set; }

    private List<MapModel> Maps { get; set; }

    private string InputValue { get; set; } = "1";
    private string StatusCode { get; set; } = string.Empty;
    private MapLoadingState LoadingState { get; set; } = MapLoadingState.NotLoaded;

    protected override void OnInitialized()
    {
        _api = ClientFactory.CreateClient(Constants.Api.WEB_API);

        MapInteractionState.OnNewMapCreatedAsync += GetUserMapsAsync;

        base.OnInitialized();
    }

    public void Dispose()
    {
        MapInteractionState.OnNewMapCreatedAsync -= GetUserMapsAsync;
    }

    private async Task GetUserMapsAsync()
    {
        if (string.IsNullOrWhiteSpace(InputValue)) return;

        ReloadModal();

        //TODO: spinner and block the button while await
        var response = await _api.GetAsync($"api/maps?appKey={InputValue}");
        if (!response.IsSuccessStatusCode)
        {
            StatusCode = response.StatusCode.ToString();
            return;
        }

        var mapsResponse = await response.Content.ReadFromJsonAsync<MapsResponse>();
        if (mapsResponse is null) return;

        await OnUserLogin.InvokeAsync(mapsResponse.UserId);

        Maps = mapsResponse.Maps.OrderByDescending(x => x.OverallProgress).ThenByDescending(x => x.CreatedAt).ToList();
        LoadingState = MapLoadingState.Loaded;

        StateHasChanged();
    }

    private async Task LoadMapAreasAsync(string mapId)
    {
        StatusCode = string.Empty;

        var response = await _api.GetAsync($"api/areas?mapId={mapId.ToString()}");
        if (!response.IsSuccessStatusCode)
        {
            StatusCode = response.StatusCode.ToString();
            return;
        }

        var areasResponse = await response.Content.ReadFromJsonAsync<AreasResponse>();
        var areas = LayoutService.InitializeMapAreas(areasResponse.Areas);

        await JS.InvokeVoidAsync("TriggerAppKeyModal", false);
        await JS.InvokeVoidAsync("SetMapAreasData", areas);

        await MapInteractionState.HandleMapSelectionAsync(Maps.Single(x => x.Id == mapId));
    }

    private void ReloadModal()
    {
        LoadingState = MapLoadingState.NotLoaded;
        StatusCode = string.Empty;
    }
}
